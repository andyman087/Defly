const stats_endpoint = `https://s.defly.io/mystats?s=${window.localStorage["sessionId"]}`;

// Rank to Name and Value Mapping
const rankDetails = {
    1: { name: "Bronze", value: 10 },
    2: { name: "Silver", value: 50 },
    3: { name: "Gold", value: 100 },
    4: { name: "Master", value: 250 },
    5: { name: "Grand Master", value: 500 }
};

/* Filter Criteria
dot_kills
start
end
game_mode - 0 = "FFA", 1 = "Teams", 2 = "Defuse", 3 = "E-FFA", 4 = "1v1"
kill_reason - 0 = "Disconnect", 1 = "Bullet", 2 = "Wall", 3 = "Player Collision", 4 = "Victory"
level - For defuse is also the total number of rounds
map_area
max_area - For defuse it is the percentage of number of rounds won eg 0.65 
max_score
player_kills
time_alive
rounds_won
map_percentage
consecutive_days
*/


// Define top-level categories, sub-categories, and achievements
const categories = [
    {
        name: "Combat",
        subCategories: [
            {
                name: "First Blood",
                achievements: [
                    { rank: 1, criteria: { player_kills: { min: 10 } }, count: 1 },
                    { rank: 2, criteria: { player_kills: { min: 50 } }, count: 1 },
                    { rank: 3, criteria: { player_kills: { min: 100 } }, count: 1 },
                    { rank: 4, criteria: { player_kills: { min: 500 } }, count: 1 },
                    { rank: 5, criteria: { player_kills: { min: 1000 } }, count: 1 }
                ]
            },
            {
                name: "Demolisher",
                achievements: [
                    { rank: 1, criteria: { dot_kills: { min: 100 } }, count: 1 },
                    { rank: 2, criteria: { dot_kills: { min: 300 } }, count: 1 },
                    { rank: 3, criteria: { dot_kills: { min: 500 } }, count: 1 },
                    { rank: 4, criteria: { dot_kills: { min: 700 } }, count: 1 },
                    { rank: 5, criteria: { dot_kills: { min: 1000 } }, count: 1 }
                ]
            }
        ]
    },
    {
        name: "Endurance",
        subCategories: [
            {
                name: "Survivor",
                achievements: [
                    { rank: 1, criteria: { time_alive: { min: 300 } }, count: 1 },
                    { rank: 2, criteria: { time_alive: { min: 600 } }, count: 1 },
                    { rank: 3, criteria: { time_alive: { min: 1200 } }, count: 1 },
                    { rank: 4, criteria: { time_alive: { min: 1800 } }, count: 1 },
                    { rank: 5, criteria: { time_alive: { min: 3600 } }, count: 1 }
                ]
            },
            {
                name: "High Scorer",
                achievements: [
                    { rank: 1, criteria: { max_score: { min: 1000 } }, count: 1 },
                    { rank: 2, criteria: { max_score: { min: 3000 } }, count: 1 },
                    { rank: 3, criteria: { max_score: { min: 5000 } }, count: 1 },
                    { rank: 4, criteria: { max_score: { min: 7000 } }, count: 1 },
                    { rank: 5, criteria: { max_score: { min: 10000 } }, count: 1 }
                ]
            }
        ]
    }
];

// Fetch All Stats
async function fetchAllStats() {
    const response = await fetch(stats_endpoint);
    if (!response.ok) {
        console.error("Failed to fetch data, status:", response.status);
        return [];
    }
    const text = await response.text();
    return JSON.parse(text.split("\n")[0]);
}

// Process Data (Adding time_alive, map_percentage, start_date)
function processData(user_data) {
    console.time("Process Data");
    const processedData = user_data.map(event => {
        const startDate = new Date(event.start);
        event.time_alive = (event.end - event.start) / 1000; // time_alive in seconds
        event.map_percentage = (event.max_area / event.map_area) * 100; // map_percentage
        event.start_date = startDate.toISOString().split('T')[0]; // YYYY-MM-DD format
        return event;
    });
    console.timeEnd("Process Data");
    return processedData;
}

// Calculate consecutive days played
function calculateConsecutiveDays(events) {
    console.time("Calculate Consecutive Days");
    let dates = events.map(event => new Date(event.start_date));
    dates = [...new Set(dates)].sort((a, b) => a - b); // Remove duplicates and sort

    let maxConsecutiveDays = 0;
    let currentConsecutiveDays = 1;

    for (let i = 1; i < dates.length; i++) {
        const diffDays = (dates[i] - dates[i - 1]) / (1000 * 60 * 60 * 24);

        if (diffDays === 1) {
            currentConsecutiveDays++;
        } else {
            maxConsecutiveDays = Math.max(maxConsecutiveDays, currentConsecutiveDays);
            currentConsecutiveDays = 1;
        }
    }

    maxConsecutiveDays = Math.max(maxConsecutiveDays, currentConsecutiveDays);
    console.timeEnd("Calculate Consecutive Days");
    return maxConsecutiveDays;
}

// Check achievement criteria
function checkCriteria(event, criteria) {
    for (let key in criteria) {
        if (!event.hasOwnProperty(key)) {
            console.error(`Error: Criteria key "${key}" does not exist in event data.`);
            return false;
        }
        if (criteria[key] !== undefined) {
            const value = event[key];
            const criterion = criteria[key];
            if (typeof criterion === 'object') {
                if (criterion.min !== undefined && value < criterion.min) return false;
                if (criterion.max !== undefined && value > criterion.max) return false;
            } else {
                if (value !== criterion) return false;
            }
        }
    }
    return true;
}

// Check for achievements
function checkAchievements(data, categories, consecutiveDays) {
    console.time("Check Achievements");
    const results = categories.map(category => {
        let categoryResults = category.subCategories.map(subCategory => {
            let subCategoryResults = subCategory.achievements.map(achievement => {
                let count = data.reduce((acc, event) => acc + (checkCriteria(event, achievement.criteria) ? 1 : 0), 0);

                // Check for consecutive days criterion
                if (achievement.criteria.consecutive_days) {
                    if (consecutiveDays >= achievement.criteria.consecutive_days.min) {
                        count++;
                    }
                }

                return { 
                    rank: achievement.rank,
                    achieved: count >= achievement.count, 
                    count: count,
                    value: rankDetails[achievement.rank].value
                };
            });
            return { 
                subCategory: subCategory.name, 
                achievements: subCategoryResults 
            };
        });
        return {
            category: category.name,
            subCategories: categoryResults
        };
    });
    console.timeEnd("Check Achievements");
    return results;
}

// Main function to fetch and process data
console.time("Total Execution Time");
fetchAllStats().then(user_data => {
    const processedData = processData(user_data);
    const consecutiveDays = calculateConsecutiveDays(processedData);
    const results = checkAchievements(processedData, categories, consecutiveDays);

    // Map rank numbers to rank names and include value
    const mappedResults = results.map(category => {
        return {
            category: category.category,
            subCategories: category.subCategories.map(subCategory => ({
                subCategory: subCategory.subCategory,
                achievements: subCategory.achievements.map(achievement => ({
                    rank: rankDetails[achievement.rank].name,
                    achieved: achievement.achieved,
                    count: achievement.count,
                    value: achievement.value
                }))
            }))
        };
    });

    console.log(mappedResults);
    console.timeEnd("Total Execution Time");
});
