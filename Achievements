const stats_endpoint = `https://s.defly.io/mystats?s=${window.localStorage["sessionId"]}`;
const rankDetails = {
    1: { name: "Bronze", value: 10, image: "https://via.placeholder.com/50?text=B" },
    2: { name: "Silver", value: 50, image: "https://via.placeholder.com/50?text=S" },
    3: { name: "Gold", value: 100, image: "https://via.placeholder.com/50?text=G" },
    4: { name: "Master", value: 250, image: "https://via.placeholder.com/50?text=M" },
    5: { name: "Grand Master", value: 500, image: "https://via.placeholder.com/50?text=GM" }
};

/* Filter Criteria
dot_kills
start
end
game_mode - 0 = "FFA", 1 = "Teams", 2 = "Defuse", 3 = "E-FFA", 4 = "1v1"
kill_reason - 0 = "Disconnect", 1 = "Bullet", 2 = "Wall", 3 = "Player Collision", 4 = "Victory"
level - For defuse is also the total number of rounds
map_area
max_area - For defuse it is the percentage of number of rounds won eg 0.65 
max_score
player_kills
time_alive
rounds_won
map_percentage
consecutive_days
*/

const categories = [
    {
        name: "TEAMS",
        subCategories: [
            { name: "First Blood", achievements: [
                { rank: 1, criteria: { player_kills: { min: 10 }, game_mode: 1 }, count: 1, description: "Get at least 10 kills" },
                { rank: 2, criteria: { player_kills: { min: 25 }, game_mode: 1 }, count: 1, description: "Get at least 25 kills" },
                { rank: 3, criteria: { player_kills: { min: 50 }, game_mode: 1 }, count: 1, description: "Get at least 50 kills" },
                { rank: 4, criteria: { player_kills: { min: 100 }, game_mode: 1 }, count: 1, description: "Get at least 100 kills" },
                { rank: 5, criteria: { player_kills: { min: 200 }, game_mode: 1 }, count: 1, description: "Get at least 200 kills" }
            ]},
            { name: "Demolisher", achievements: [
                { rank: 1, criteria: { dot_kills: { min: 250 }, game_mode: 1 }, count: 1, description: "Destroy at least 250 dots" },
                { rank: 2, criteria: { dot_kills: { min: 500 }, game_mode: 1 }, count: 1, description: "Destroy at least 500 dots" },
                { rank: 3, criteria: { dot_kills: { min: 1000 }, game_mode: 1 }, count: 1, description: "Destroy at least 1000 dots" },
                { rank: 4, criteria: { dot_kills: { min: 5000 }, game_mode: 1 }, count: 1, description: "Destroy at least 5000 dots" },
                { rank: 5, criteria: { dot_kills: { min: 10000 }, game_mode: 1 }, count: 1, description: "Destroy at least 10000 dots" }
            ]}
        ]
    },
    {
        name: "DEFUSE",
        subCategories: [
            { name: "Survivor", achievements: [
                { rank: 1, criteria: { time_alive: { min: 600 }, game_mode: 2 }, count: 1, description: "Survive for at least 10 minutes" },
                { rank: 2, criteria: { time_alive: { min: 1800 }, game_mode: 2 }, count: 1, description: "Survive for at least 30 minutes" },
                { rank: 3, criteria: { time_alive: { min: 3600 }, game_mode: 2 }, count: 1, description: "Survive for at least 60 minutes" },
                { rank: 4, criteria: { time_alive: { min: 3600*3 }, game_mode: 2 }, count: 1, description: "Survive for at least 3 hours" },
                { rank: 5, criteria: { time_alive: { min: 3600*5 }, game_mode: 2 }, count: 1, description: "Survive for at least 5 hours" }
            ]},
            { name: "High Scorer", achievements: [
                { rank: 1, criteria: { max_score: { min: 5000 }, game_mode: 2 }, count: 1, description: "Achieve a score of at least 5000" },
                { rank: 2, criteria: { max_score: { min: 10000 }, game_mode: 2 }, count: 1, description: "Achieve a score of at least 10000" },
                { rank: 3, criteria: { max_score: { min: 50000 }, game_mode: 2 }, count: 1, description: "Achieve a score of at least 50000" },
                { rank: 4, criteria: { max_score: { min: 100000 }, game_mode: 2 }, count: 1, description: "Achieve a score of at least 100000" },
                { rank: 5, criteria: { max_score: { min: 200000 }, game_mode: 2 }, count: 1, description: "Achieve a score of at least 200000" }
            ]}
        ]
    }
];

async function fetchAllStats() {
    const response = await fetch(stats_endpoint);
    if (!response.ok) {
        console.error("Failed to fetch data, status:", response.status);
        return [];
    }
    const text = await response.text();
    return JSON.parse(text.split("\n")[0]);
}

function processData(user_data) {
    const processedData = user_data.map(event => {
        const startDate = new Date(event.start);
        event.time_alive = (event.end - event.start) / 1000;
        event.map_percentage = (event.max_area / event.map_area) * 100;
        event.start_date = startDate.toISOString().split('T')[0];
        return event;
    });
    return processedData;
}

function calculateConsecutiveDays(events) {
    let dates = events.map(event => new Date(event.start_date));
    dates = [...new Set(dates)].sort((a, b) => a - b);

    let maxConsecutiveDays = 0;
    let currentConsecutiveDays = 1;

    for (let i = 1; i < dates.length; i++) {
        const diffDays = (dates[i] - dates[i - 1]) / (1000 * 60 * 60 * 24);
        if (diffDays === 1) {
            currentConsecutiveDays++;
        } else {
            maxConsecutiveDays = Math.max(maxConsecutiveDays, currentConsecutiveDays);
            currentConsecutiveDays = 1;
        }
    }
    maxConsecutiveDays = Math.max(maxConsecutiveDays, currentConsecutiveDays);
    return maxConsecutiveDays;
}

function checkCriteria(event, criteria) {
    for (let key in criteria) {
        if (!event.hasOwnProperty(key)) {
            console.error(`Error: Criteria key "${key}" does not exist in event data.`);
            return false;
        }
        if (criteria[key] !== undefined) {
            const value = event[key];
            const criterion = criteria[key];
            if (typeof criterion === 'object') {
                if (criterion.min !== undefined && value < criterion.min) return false;
                if (criterion.max !== undefined && value > criterion.max) return false;
            } else {
                if (value !== criterion) return false;
            }
        }
    }
    return true;
}

function checkAchievements(data, categories, consecutiveDays) {
    const results = categories.map(category => {
        let categoryResults = category.subCategories.map(subCategory => {
            let subCategoryResults = subCategory.achievements.map(achievement => {
                let count = data.reduce((acc, event) => acc + (checkCriteria(event, achievement.criteria) ? 1 : 0), 0);
                if (achievement.criteria.consecutive_days) {
                    if (consecutiveDays >= achievement.criteria.consecutive_days.min) {
                        count++;
                    }
                }
                return {
                    rank: achievement.rank,
                    achieved: count >= achievement.count,
                    criteria: achievement.criteria || {},
                    description: achievement.description,
                    value: rankDetails[achievement.rank].value
                };
            });
            return {
                subCategory: subCategory.name,
                achievements: subCategoryResults
            };
        });
        return {
            category: category.name,
            subCategories: categoryResults
        };
    });
    return results;
}

async function displayAchievementsPage() {
    const user_data = await fetchAllStats();
    const processedData = processData(user_data);
    const consecutiveDays = calculateConsecutiveDays(processedData);
    const results = checkAchievements(processedData, categories, consecutiveDays);

    const mappedResults = results.map(category => {
        return {
            category: category.category,
            subCategories: category.subCategories.map(subCategory => ({
                subCategory: subCategory.subCategory,
                achievements: subCategory.achievements.map(achievement => {
                    const rankDetail = rankDetails[achievement.rank];
                    if (!rankDetail) {
                        return null;
                    }
                    return {
                        rank: rankDetail.name,
                        achieved: achievement.achieved,
                        criteria: achievement.criteria,
                        description: achievement.description,
                        value: achievement.value,
                        image: rankDetail.image
                    };
                }).filter(Boolean)
            }))
        };
    });

    let totalValue = 0;
    const achievementsHtml = mappedResults.map(category => {
        const subCategoriesHtml = category.subCategories.map(subCategory => {
            const achievementsHtml = subCategory.achievements.map(achievement => {
                if (achievement.achieved) {
                    totalValue += achievement.value;
                }
                const imageUrl = achievement.achieved ? achievement.image : 'https://via.placeholder.com/50?text=X';
                return `<div style="display: inline-block; margin: 10px;">
                            <img src="${imageUrl}" alt="${achievement.rank}" style="width: 50px; height: 50px;">
                            <div>${achievement.rank}</div>
                            <div>${achievement.description}</div>
                        </div>`;
            }).join('');
            return `<div>
                        <h3>${subCategory.subCategory}</h3>
                        ${achievementsHtml}
                    </div>`;
        }).join('');
        return `<div id="${category.category}" class="tabcontent">
                    <h2>${category.category}</h2>
                    ${subCategoriesHtml}
                </div>`;
    }).join('');

    const popupHtml = `<div id="achievementsPopup" style="position: fixed; top: 10%; left: 10%; width: 80%; height: 80%; background: white; border: 1px solid #ccc; box-shadow: 0 0 10px rgba(0,0,0,0.5); padding: 20px; overflow-y: auto;">
                            <button onclick="document.getElementById('achievementsPopup').remove()" style="position: absolute; top: 10px; right: 10px; background: #3d5dff; color: white; border: none; padding: 5px 10px; cursor: pointer; box-shadow: 0 0 5px #374ebf;">Close</button>
                            <h1>Achievements</h1>
                            <div style="text-align: right; margin-bottom: 10px;">Total Value: ${totalValue}</div>
                            <div class="tab">
                                ${categories.map(category => `<button class="tablinks" onclick="openCategory(event, '${category.name}')" style="box-shadow: 0 0 5px #374ebf;">${category.name}</button>`).join('')}
                            </div>
                            ${achievementsHtml}
                        </div>
                        <style>
                            .tab { overflow: hidden; }
                            .tab button { background-color: inherit; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; transition: 0.3s; background: #3d5dff; color: white; box-shadow: 0 0 5px #374ebf; }
                            .tab button:hover { background-color: #ddd; }
                            .tabcontent { display: none; padding: 6px 12px; border-top: none; }
                        </style>`;

    const popupDiv = document.createElement('div');
    popupDiv.innerHTML = popupHtml;
    document.body.appendChild(popupDiv);
    document.getElementById("achievementsPopup").style.display = 'block';
    openCategory = function(evt, categoryName) {
        const tabcontent = document.getElementsByClassName('tabcontent');
        for (let i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = 'none';
        }
        const tablinks = document.getElementsByClassName('tablinks');
        for (let i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(' active', '');
        }
        document.getElementById(categoryName).style.display = 'block';
        evt.currentTarget.className += ' active';
    }
}

const achievementButton = document.createElement('button');
achievementButton.innerText = 'Show Achievements';
achievementButton.style.background = '#3d5dff';
achievementButton.style.color = 'white';
achievementButton.style.border = 'none';
achievementButton.style.padding = '10px 20px';
achievementButton.style.position = 'fixed';
achievementButton.style.top = '10px';
achievementButton.style.left = '10px';
achievementButton.style.cursor = 'pointer';
achievementButton.style.boxShadow = '0 0 5px #374ebf';
achievementButton.onmouseover = function() { achievementButton.style.backgroundColor = '#374ebf'; };
achievementButton.onmouseout = function() { achievementButton.style.backgroundColor = '#3d5dff'; };
achievementButton.onclick = displayAchievementsPage;
document.body.appendChild(achievementButton);
